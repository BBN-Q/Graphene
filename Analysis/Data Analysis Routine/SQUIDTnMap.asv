GenerateNoiseSpectrumDataFileList
NoiseSpecFileList = DataFileList;
GenerateS11DataFileList
S11SpecFileList = DataFileList;

CurrentBiasT = ParametersList(:,1);
FluxBiasT = ParametersList(:,2);
Temp = ParametersList(:,3);

BiasCurrentInPlot = min(CurrentBiasT):0.1:max(CurrentBiasT);
FluxBiasInPlot = min(FluxBiasT):0.1:max(FluxBiasT);
NGRatio = zeros(length(BiasCurrentInPlot),length(FluxBiasInPlot));
EstTn = zeros(length(BiasCurrentInPlot),length(FluxBiasInPlot));

fCenter = 1.075e9; bw = 100e6;

[dummy1, Freq_GHz, AvgNoiseSpec_mW, dummy2, AllNoiseSpectrums] = AnalyzeSpectrums(NoiseSpecFileList, ParametersList, 0, fCenter, bw, 0);
[dummy1, Freq_GHz, AvgS11Spec, dummy2, AllS11Spectrums] = AnalyzeSpectrums(S11SpecFileList, ParametersList, 0, fCenter, bw, 0);
AllS11Spectrums = 1000*AllS11Spectrums;
AvgS11Spec = AvgS11Spec*1000;


for m=1:length(Temp)
    [dummy3, CurrentIndex] = min(abs(BiasCurrentInPlot-CurrentBiasT(m)));
    [dummy3, FluxIndex] = min(abs(FluxBiasInPlot-FluxBiasT(m)));
    NGRatio(CurrentIndex, FluxIndex) = AvgNoiseSpec_mW(m)/AvgS11Spec(m);
end

surf( FluxBiasInPlot, BiasCurrentInPlot, NGRatio)
xlabel('Flux Bias (turns)'); ylabel('Current Bias (turns)'); zlabel('Noise-to-Gain Ratio'); title('Noise-to-Gain Ratio');

    
    


%for k=1:110
%fCenter(k) = (0.01*k+0.8)*1e9;
%[dummy, Freq_GHz, AvgSpecPow, T_K, AllSpectrums] = AnalyzeSpectrums(DataFileList, ParametersList, 0, fCenter(k), 10e6, 0);
%[FitResult, gof] = fit(T_K', AvgSpecPow', 'poly1')
%TNoise(k) = FitResult.p2/FitResult.p1;
%if abs(fCenter(k)-1.35e9)<0.01e9
%    figure; plot(T_K, AvgSpecPow, 'd'); hold on; plot(FitResult); title(fCenter(k)); grid on; figure;
%end
%end

%plot(fCenter, TNoise, 'g-');
%grid on;
%xlabel('Freq (GHz)'); ylabel('T_N (K)'); title('Noise Temperature (K)');